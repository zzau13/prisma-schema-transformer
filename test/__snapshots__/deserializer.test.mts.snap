// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`bad config path 1`] = `[Error: bad config path "not-exist.mjs"]`;

exports[`bad config path extension 1`] = `[Error: config file extension should be ".mjs"]`;

exports[`deserialized blog 1`] = `
"generator client {
  provider = "prisma-client-js"
  binaryTargets = [{"fromEnvVar":null,"value":"debian-openssl-1.1.x","native":true}]
}

datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(dbgenerated("gen_random_uuid()"))
  email String  @unique
  name  String?
  posts Post[]  @relation("PostToUser")
  likes Like[]  @relation("LikeToUser")
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  published Boolean
  title     String
  content   String?
  authorId  String?
  author    User?      @relation("PostToUser", fields: [authorId], references: [id])
  status    PostStatus
  likes     Like[]     @relation("LikeToPost")
}

model Like {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("LikeToUser", fields: [userId], references: [id])
  postId String
  post   Post   @relation("LikeToPost", fields: [postId], references: [id])

  @@unique([userId, postId])
}

enum PostStatus {
  hidden
  visible

  @@map("PostStatuses")
}
"
`;

exports[`deserialized blog absolute path config 1`] = `
"generator client {
  provider = "prisma-client-js"
  binaryTargets = [{"fromEnvVar":null,"value":"debian-openssl-1.1.x","native":true}]
}

datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(dbgenerated("gen_random_uuid()"))
  email String  @unique
  name  String?
  posts Post[]  @relation("PostToUser")
  likes Like[]  @relation("LikeToUser")
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  published Boolean
  title     String
  content   String?
  authorId  String?
  author    User?      @relation("PostToUser", fields: [authorId], references: [id])
  status    PostStatus
  likes     Like[]     @relation("LikeToPost")
}

model Like {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("LikeToUser", fields: [userId], references: [id])
  postId String
  post   Post   @relation("LikeToPost", fields: [postId], references: [id])

  @@unique([userId, postId])
}

enum PostStatus {
  hidden
  visible

  @@map("PostStatuses")
}
"
`;

exports[`deserialized blog default config 1`] = `
"generator client {
  provider = "prisma-client-js"
  binaryTargets = [{"fromEnvVar":null,"value":"debian-openssl-1.1.x","native":true}]
}

datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(dbgenerated("gen_random_uuid()"))
  email String  @unique
  name  String?
  posts Post[]  @relation("PostToUser")
  likes Like[]  @relation("LikeToUser")
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  published Boolean
  title     String
  content   String?
  authorId  String?
  author    User?      @relation("PostToUser", fields: [authorId], references: [id])
  status    PostStatus
  likes     Like[]     @relation("LikeToPost")
}

model Like {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("LikeToUser", fields: [userId], references: [id])
  postId String
  post   Post   @relation("LikeToPost", fields: [postId], references: [id])

  @@unique([userId, postId])
}

enum PostStatus {
  hidden
  visible

  @@map("PostStatuses")
}
"
`;

exports[`deserialized schema 1`] = `
"generator client {
  provider   = "prisma-client-js"
  output     = env("FOO")
  binaryTargets = [{"fromEnvVar":null,"value":"debian-openssl-1.1.x","native":true}]
  another    = "foo"
  anotherFoo = "foo"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  plantId    String    @map("PlantId")
  employeeId String    @unique @map("EmployeeId")
  uni        String    @map("Uni")
  anothers   Another[] @relation("AnothersToEmployees")
  lastOne    Last?     @relation("EmployeesToLast_PlantId_EmployeeOneId")
  lastTwo    Last?     @relation("EmployeesToLast_PlantId_EmployeeTwoId")

  @@id([plantId, employeeId])
  @@unique([plantId, uni])
  @@map("Employees")
}

model Another {
  /// @Foo
  /// @Bar
  anotherId  String   @map("AnotherId")
  plantId    String   @map("PlantId")
  employeeId String   @map("EmployeeId")
  uni        String   @map("Uni")
  employee   Employee @relation("AnothersToEmployees", fields: [plantId, employeeId], references: [plantId, employeeId], onDelete: NoAction)

  @@id([plantId, anotherId])
  @@unique([plantId, employeeId])
  @@map("Anothers")
}

model Last {
  /// @Foo
  plantId       String   @map("PlantId")
  id            Int      @id
  employeeOneId String   @map("EmployeeOneId")
  employeeOne   Employee @relation("EmployeesToLast_PlantId_EmployeeOneId", fields: [plantId, employeeOneId], references: [plantId, employeeId], onDelete: NoAction)
  employeeTwoId String   @map("EmployeeTwoId")
  employeeTwo   Employee @relation("EmployeesToLast_PlantId_EmployeeTwoId", fields: [plantId, employeeTwoId], references: [plantId, employeeId], onDelete: NoAction)

  @@unique([plantId, employeeOneId])
  @@unique([plantId, employeeTwoId])
}
"
`;

exports[`deserialized simple 1`] = `
"model Post {
  id        Int      @id @default(autoincrement())
  title     String   @default("foo")
  number    Int      @default(3)
  published Boolean  @default(false)
  foo       Foo      @default(bar)
  content   String?
  authorId  Int      @map("author_id")
  author    User     @relation("postsTousers", fields: [authorId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("posts")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  weight    Float
  posts     Post[]   @relation("postsTousers")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

enum Foo {
  bar  @map("BAR")
  bar2 @map("BAR2")

  @@map("foos")
}
"
`;
